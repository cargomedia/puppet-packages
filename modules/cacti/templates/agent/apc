<?php

if(0) {
	return;
}

$status = @apc_cache_info('opcode', true);
$statusUser = @apc_cache_info('user', true);
$statusMem = apc_sma_info();
$memSize = $statusMem['num_seg'] * $statusMem['seg_size'];
$memAvail = $statusMem['avail_mem'];
$memUsed = $memSize - $memAvail;

$nseg = $freeseg = $fragsize = $freetotal = 0;
for ($i = 0; $i < $statusMem['num_seg']; $i++) {
	$ptr = 0;
	foreach ($statusMem['block_lists'][$i] as $block) {
		if ($block['offset'] != $ptr) {
			++$nseg;
		}
		$ptr = $block['offset'] + $block['size'];
		// Only consider blocks <5M for the fragmentation %
		if ($block['size'] < (5 * 1024 * 1024)) {
			$fragsize += $block['size'];
		}
		$freetotal += $block['size'];
	}
	$freeseg += count($statusMem['block_lists'][$i]);
}

if ($freeseg < 2) {
	$fragsize = 0;
	$freeseg = 0;
}
$cactiStats = array(
	'memory_segments'       => (int) $statusMem['num_seg'],
	'segment_size'          => (int) $statusMem['seg_size'],
	'total_memory'          => (int) $statusMem['num_seg'] * $statusMem['seg_size'],
	'cached_files_count'    => (int) $status['num_entries'],
	'cached_files_size'     => (int) $status['mem_size'],
	'cache_hits'            => (int) $status['num_hits'],
	'cache_misses'          => (int) $status['num_misses'],
	'cache_full_count'      => (int) $status['expunges'],
	'user_cache_vars_count' => (int) $statusUser['num_entries'],
	'user_cache_vars_size'  => (int) $statusUser['mem_size'],
	'user_cache_hits'       => (int) $statusUser['num_hits'],
	'user_cache_misses'     => (int) $statusUser['num_misses'],
	'user_cache_full_count' => (int) $statusUser['expunges'],
	'fragment_percentage'   => sprintf("%.2f", $freeseg ? $fragsize / $freetotal * 100 : 0),
	'fragmented'            => sprintf("%.2f", $fragsize),
	'fragment_segments'     => $freeseg,
);

foreach ($cactiStats as $key => $value) {
	echo($key . ':' . $value . ' ');
}
echo "\n";
