[general]

configs_folder = <%= @config_dir %>
plugins_folder = <%= @plugins_folder %>
transports_folder = <%= @transports_folder %>

<% if @bind_address.nil? %>;<% end %>interface = <%= @bind_address %>	; Interface to use (will be used in SDP)
debug_level = <%= @log_level %>				; Debug/logging level, valid values are 0-7
debug_timestamps = yes		; Whether to show a timestamp for each log line
debug_colors = no			; Whether colors should be disabled in the log

<% unless @api_secret %>;<%- end %>api_secret = <%= @api_secret %>	 ; String that all Janus requests must contain
                             ; to be accepted/authorized by the Janus core.
                             ; Useful if you're wrapping all Janus API requests
                             ; in your servers (that is, not in the browser,
                             ; where you do the things your way) and you
                             ; don't want other application to mess with
                             ; this Janus instance.

token_auth = <%= @token_auth %>  ; Enable a token based authentication
                            ; mechanism to force users to always provide
                            ; a valid token in all requests. Useful if
                            ; you want to authenticate requests from web
                            ; users. For this to work, the Admin API MUST
                            ; be enabled, as tokens are added and removed
                            ; through messages sent there.


[plugins]
;disable = libjanus_echotest.so,libjanus_audiobridge.so,libjanus_recordplay.so,libjanus_sip.so,libjanus_streaming.so,libjanus_videocall.so,libjanus_videoroom.so,libjanus_voicemail.so

; You can choose which of the available transports should be enabled or
; not. Use the 'disable' directive to prevent Janus from loading one
; or more transport: use a comma separated list of transport file names
; to identify the transports to disable. By default all available
; transports are enabled and loaded at startup.
[transports]
; disable = libjanus_rabbitmq.so

[certificates]
cert_pem = <%= @ssl_config_dir %>/cert.pem
cert_key = <%= @ssl_config_dir %>/cert.key

; Media-related stuff: you can configure whether if you want
; to enable IPv6 support (still WIP, so handle with care), the maximum size
; of the NACK queue for retransmissions per handle the range of ports to
; use for RTP and RTCP (by default, no range is envisaged), the
; starting MTU for DTLS (1472 by default, it adapts automatically),
; if BUNDLE should be forced (defaults to false) and if RTCP muxing should
; be forced (defaults to false).
[media]
;ipv6 = true
;max_nack_queue = 300
rtp_port_range = <%= @rtp_port_range_min %>-<%= @rtp_port_range_max %>
;dtls_mtu = 1200
;force-bundle = true
;force-rtcp-mux = true

; NAT-related stuff: specifically, you can configure the STUN/TURN
; servers to use to gather candidates if the gateway is behind a NAT,
; and srflx/relay candidates are needed. In case STUN is not enough and
; this is needed (it shouldn't), you can also configure Janus to use a
; TURN server; please notice that this does NOT refer to TURN usage in
; browsers, but in the gathering of relay candidates by Janus itself,
; e.g., if you want to limit the ports used by a Janus instance on a
; private machine. Furthermore, you can choose whether Janus should be
; configured to work in ICE-Lite mode (by default it doesn't). Finally,
; you can also enable ICE-TCP support (beware that it currently *only*
; works if you enable ICE Lite as well), choose which interfaces should
; be used for gathering candidates, and enable or disable the
; internal libnice debugging, if needed.
[nat]
<% if @stun_server %>
stun_server = <%= @stun_server %>
<% else %>
;stun_server = stun.example.com
<% end %>
stun_port = <%= @stun_port %>
nice_debug = false
;ice_lite = true
;ice_tcp = true

; In case you're deploying Janus on a server which is configured with
; a 1:1 NAT (e.g., Amazon EC2), you might want to also specify the public
; address of the machine using the setting below. This will result in
; all host candidates (which normally have a private IP address) to
; be rewritten with the public address provided in the settings. As
; such, use the option with caution and only if you know what you're doing.
<% if @nat_1_1_mapping %>
nat_1_1_mapping = <%= @nat_1_1_mapping %>
<% else %>
;nat_1_1_mapping = 1.2.3.4
<% end %>

; You can configure a TURN server in two different ways: specifying a
; statically configured TURN server, and thus provide the address of the
; TURN server, the transport (udp/tcp/tls) to use, and a set of valid
; credentials to authenticate...
<% if @turn_server %>
turn_server = <%= @turn_server %>
<% else %>
;turn_server = myturnserver.com
<% end %>
turn_port = <%= @turn_port %>
turn_type = <%= @turn_type %>
turn_user = <%= @turn_user %>
turn_pwd = <%= @turn_pwd %>

; ... or you can make use of the TURN REST API to get info on one or more
; TURN services dynamically. This makes use of the proposed standard of
; such an API (https://tools.ietf.org/html/draft-uberti-behave-turn-rest-00)
; which is currently available in both rfc5766-turn-server and coturn.
; You enable this by specifying the address of your TURN REST API backend
; and, if required, the API key Janus must provide.
<% if @turn_rest_api %>
turn_rest_api = <%= @turn_rest_api %>
turn_rest_api_key = <%= @turn_rest_api_key %>
<% else %>
;turn_rest_api = http://yourbackend.com/path/to/api
;turn_rest_api_key = anyapikeyyoumayhaveset
<% end %>

